/*
 * Generated by gdbus-codegen 2.33.3. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __DBUS_DISPLAY_MANAGER_H__
#define __DBUS_DISPLAY_MANAGER_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DisplayManager.Seat */

#define TYPE_DISPLAY_MANAGER_SEAT (display_manager_seat_get_type ())
#define DISPLAY_MANAGER_SEAT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_DISPLAY_MANAGER_SEAT, DisplayManagerSeat))
#define IS_DISPLAY_MANAGER_SEAT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_DISPLAY_MANAGER_SEAT))
#define DISPLAY_MANAGER_SEAT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_DISPLAY_MANAGER_SEAT, DisplayManagerSeatIface))

struct _DisplayManagerSeat;
typedef struct _DisplayManagerSeat DisplayManagerSeat;
typedef struct _DisplayManagerSeatIface DisplayManagerSeatIface;

struct _DisplayManagerSeatIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_lock) (
    DisplayManagerSeat *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_switch_to_greeter) (
    DisplayManagerSeat *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_switch_to_guest) (
    DisplayManagerSeat *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_session_name);

  gboolean (*handle_switch_to_user) (
    DisplayManagerSeat *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_username,
    const gchar *arg_session_name);

  gboolean  (*get_can_switch) (DisplayManagerSeat *object);

  gboolean  (*get_has_guest_account) (DisplayManagerSeat *object);

  const gchar *const * (*get_sessions) (DisplayManagerSeat *object);

};

GType display_manager_seat_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *display_manager_seat_interface_info (void);
guint display_manager_seat_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void display_manager_seat_complete_switch_to_greeter (
    DisplayManagerSeat *object,
    GDBusMethodInvocation *invocation);

void display_manager_seat_complete_switch_to_user (
    DisplayManagerSeat *object,
    GDBusMethodInvocation *invocation);

void display_manager_seat_complete_switch_to_guest (
    DisplayManagerSeat *object,
    GDBusMethodInvocation *invocation);

void display_manager_seat_complete_lock (
    DisplayManagerSeat *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void display_manager_seat_call_switch_to_greeter (
    DisplayManagerSeat *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean display_manager_seat_call_switch_to_greeter_finish (
    DisplayManagerSeat *proxy,
    GAsyncResult *res,
    GError **error);

gboolean display_manager_seat_call_switch_to_greeter_sync (
    DisplayManagerSeat *proxy,
    GCancellable *cancellable,
    GError **error);

void display_manager_seat_call_switch_to_user (
    DisplayManagerSeat *proxy,
    const gchar *arg_username,
    const gchar *arg_session_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean display_manager_seat_call_switch_to_user_finish (
    DisplayManagerSeat *proxy,
    GAsyncResult *res,
    GError **error);

gboolean display_manager_seat_call_switch_to_user_sync (
    DisplayManagerSeat *proxy,
    const gchar *arg_username,
    const gchar *arg_session_name,
    GCancellable *cancellable,
    GError **error);

void display_manager_seat_call_switch_to_guest (
    DisplayManagerSeat *proxy,
    const gchar *arg_session_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean display_manager_seat_call_switch_to_guest_finish (
    DisplayManagerSeat *proxy,
    GAsyncResult *res,
    GError **error);

gboolean display_manager_seat_call_switch_to_guest_sync (
    DisplayManagerSeat *proxy,
    const gchar *arg_session_name,
    GCancellable *cancellable,
    GError **error);

void display_manager_seat_call_lock (
    DisplayManagerSeat *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean display_manager_seat_call_lock_finish (
    DisplayManagerSeat *proxy,
    GAsyncResult *res,
    GError **error);

gboolean display_manager_seat_call_lock_sync (
    DisplayManagerSeat *proxy,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
gboolean display_manager_seat_get_can_switch (DisplayManagerSeat *object);
void display_manager_seat_set_can_switch (DisplayManagerSeat *object, gboolean value);

gboolean display_manager_seat_get_has_guest_account (DisplayManagerSeat *object);
void display_manager_seat_set_has_guest_account (DisplayManagerSeat *object, gboolean value);

const gchar *const *display_manager_seat_get_sessions (DisplayManagerSeat *object);
gchar **display_manager_seat_dup_sessions (DisplayManagerSeat *object);
void display_manager_seat_set_sessions (DisplayManagerSeat *object, const gchar *const *value);


/* ---- */

#define TYPE_DISPLAY_MANAGER_SEAT_PROXY (display_manager_seat_proxy_get_type ())
#define DISPLAY_MANAGER_SEAT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_DISPLAY_MANAGER_SEAT_PROXY, DisplayManagerSeatProxy))
#define DISPLAY_MANAGER_SEAT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_DISPLAY_MANAGER_SEAT_PROXY, DisplayManagerSeatProxyClass))
#define DISPLAY_MANAGER_SEAT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_DISPLAY_MANAGER_SEAT_PROXY, DisplayManagerSeatProxyClass))
#define IS_DISPLAY_MANAGER_SEAT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_DISPLAY_MANAGER_SEAT_PROXY))
#define IS_DISPLAY_MANAGER_SEAT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_DISPLAY_MANAGER_SEAT_PROXY))

typedef struct _DisplayManagerSeatProxy DisplayManagerSeatProxy;
typedef struct _DisplayManagerSeatProxyClass DisplayManagerSeatProxyClass;
typedef struct _DisplayManagerSeatProxyPrivate DisplayManagerSeatProxyPrivate;

struct _DisplayManagerSeatProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  DisplayManagerSeatProxyPrivate *priv;
};

struct _DisplayManagerSeatProxyClass
{
  GDBusProxyClass parent_class;
};

GType display_manager_seat_proxy_get_type (void) G_GNUC_CONST;

void display_manager_seat_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DisplayManagerSeat *display_manager_seat_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
DisplayManagerSeat *display_manager_seat_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void display_manager_seat_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DisplayManagerSeat *display_manager_seat_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
DisplayManagerSeat *display_manager_seat_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_DISPLAY_MANAGER_SEAT_SKELETON (display_manager_seat_skeleton_get_type ())
#define DISPLAY_MANAGER_SEAT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_DISPLAY_MANAGER_SEAT_SKELETON, DisplayManagerSeatSkeleton))
#define DISPLAY_MANAGER_SEAT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_DISPLAY_MANAGER_SEAT_SKELETON, DisplayManagerSeatSkeletonClass))
#define DISPLAY_MANAGER_SEAT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_DISPLAY_MANAGER_SEAT_SKELETON, DisplayManagerSeatSkeletonClass))
#define IS_DISPLAY_MANAGER_SEAT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_DISPLAY_MANAGER_SEAT_SKELETON))
#define IS_DISPLAY_MANAGER_SEAT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_DISPLAY_MANAGER_SEAT_SKELETON))

typedef struct _DisplayManagerSeatSkeleton DisplayManagerSeatSkeleton;
typedef struct _DisplayManagerSeatSkeletonClass DisplayManagerSeatSkeletonClass;
typedef struct _DisplayManagerSeatSkeletonPrivate DisplayManagerSeatSkeletonPrivate;

struct _DisplayManagerSeatSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  DisplayManagerSeatSkeletonPrivate *priv;
};

struct _DisplayManagerSeatSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType display_manager_seat_skeleton_get_type (void) G_GNUC_CONST;

DisplayManagerSeat *display_manager_seat_skeleton_new (void);


G_END_DECLS

#endif /* __DBUS_DISPLAY_MANAGER_H__ */
