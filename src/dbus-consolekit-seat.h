/*
 * Generated by gdbus-codegen 2.34.0. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __DBUS_CONSOLEKIT_SEAT_H__
#define __DBUS_CONSOLEKIT_SEAT_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.ConsoleKit.Seat */

#define TYPE_CONSOLE_KIT_SEAT (console_kit_seat_get_type ())
#define CONSOLE_KIT_SEAT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_CONSOLE_KIT_SEAT, ConsoleKitSeat))
#define IS_CONSOLE_KIT_SEAT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_CONSOLE_KIT_SEAT))
#define CONSOLE_KIT_SEAT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_CONSOLE_KIT_SEAT, ConsoleKitSeatIface))

struct _ConsoleKitSeat;
typedef struct _ConsoleKitSeat ConsoleKitSeat;
typedef struct _ConsoleKitSeatIface ConsoleKitSeatIface;

struct _ConsoleKitSeatIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_activate_session) (
    ConsoleKitSeat *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_ssid);

  gboolean (*handle_can_activate_sessions) (
    ConsoleKitSeat *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_active_session) (
    ConsoleKitSeat *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_devices) (
    ConsoleKitSeat *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_id) (
    ConsoleKitSeat *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_sessions) (
    ConsoleKitSeat *object,
    GDBusMethodInvocation *invocation);

  void (*active_session_changed) (
    ConsoleKitSeat *object,
    const gchar *arg_ssid);

  void (*device_added) (
    ConsoleKitSeat *object,
    GVariant *arg_device);

  void (*device_removed) (
    ConsoleKitSeat *object,
    GVariant *arg_device);

  void (*session_added) (
    ConsoleKitSeat *object,
    const gchar *arg_ssid);

  void (*session_removed) (
    ConsoleKitSeat *object,
    const gchar *arg_ssid);

};

GType console_kit_seat_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *console_kit_seat_interface_info (void);
guint console_kit_seat_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void console_kit_seat_complete_get_id (
    ConsoleKitSeat *object,
    GDBusMethodInvocation *invocation,
    const gchar *sid);

void console_kit_seat_complete_get_sessions (
    ConsoleKitSeat *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *sessions);

void console_kit_seat_complete_get_devices (
    ConsoleKitSeat *object,
    GDBusMethodInvocation *invocation,
    GVariant *devices);

void console_kit_seat_complete_get_active_session (
    ConsoleKitSeat *object,
    GDBusMethodInvocation *invocation,
    const gchar *ssid);

void console_kit_seat_complete_can_activate_sessions (
    ConsoleKitSeat *object,
    GDBusMethodInvocation *invocation,
    gboolean can_activate);

void console_kit_seat_complete_activate_session (
    ConsoleKitSeat *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void console_kit_seat_emit_active_session_changed (
    ConsoleKitSeat *object,
    const gchar *arg_ssid);

void console_kit_seat_emit_session_added (
    ConsoleKitSeat *object,
    const gchar *arg_ssid);

void console_kit_seat_emit_session_removed (
    ConsoleKitSeat *object,
    const gchar *arg_ssid);

void console_kit_seat_emit_device_added (
    ConsoleKitSeat *object,
    GVariant *arg_device);

void console_kit_seat_emit_device_removed (
    ConsoleKitSeat *object,
    GVariant *arg_device);



/* D-Bus method calls: */
void console_kit_seat_call_get_id (
    ConsoleKitSeat *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean console_kit_seat_call_get_id_finish (
    ConsoleKitSeat *proxy,
    gchar **out_sid,
    GAsyncResult *res,
    GError **error);

gboolean console_kit_seat_call_get_id_sync (
    ConsoleKitSeat *proxy,
    gchar **out_sid,
    GCancellable *cancellable,
    GError **error);

void console_kit_seat_call_get_sessions (
    ConsoleKitSeat *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean console_kit_seat_call_get_sessions_finish (
    ConsoleKitSeat *proxy,
    gchar ***out_sessions,
    GAsyncResult *res,
    GError **error);

gboolean console_kit_seat_call_get_sessions_sync (
    ConsoleKitSeat *proxy,
    gchar ***out_sessions,
    GCancellable *cancellable,
    GError **error);

void console_kit_seat_call_get_devices (
    ConsoleKitSeat *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean console_kit_seat_call_get_devices_finish (
    ConsoleKitSeat *proxy,
    GVariant **out_devices,
    GAsyncResult *res,
    GError **error);

gboolean console_kit_seat_call_get_devices_sync (
    ConsoleKitSeat *proxy,
    GVariant **out_devices,
    GCancellable *cancellable,
    GError **error);

void console_kit_seat_call_get_active_session (
    ConsoleKitSeat *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean console_kit_seat_call_get_active_session_finish (
    ConsoleKitSeat *proxy,
    gchar **out_ssid,
    GAsyncResult *res,
    GError **error);

gboolean console_kit_seat_call_get_active_session_sync (
    ConsoleKitSeat *proxy,
    gchar **out_ssid,
    GCancellable *cancellable,
    GError **error);

void console_kit_seat_call_can_activate_sessions (
    ConsoleKitSeat *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean console_kit_seat_call_can_activate_sessions_finish (
    ConsoleKitSeat *proxy,
    gboolean *out_can_activate,
    GAsyncResult *res,
    GError **error);

gboolean console_kit_seat_call_can_activate_sessions_sync (
    ConsoleKitSeat *proxy,
    gboolean *out_can_activate,
    GCancellable *cancellable,
    GError **error);

void console_kit_seat_call_activate_session (
    ConsoleKitSeat *proxy,
    const gchar *arg_ssid,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean console_kit_seat_call_activate_session_finish (
    ConsoleKitSeat *proxy,
    GAsyncResult *res,
    GError **error);

gboolean console_kit_seat_call_activate_session_sync (
    ConsoleKitSeat *proxy,
    const gchar *arg_ssid,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_CONSOLE_KIT_SEAT_PROXY (console_kit_seat_proxy_get_type ())
#define CONSOLE_KIT_SEAT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_CONSOLE_KIT_SEAT_PROXY, ConsoleKitSeatProxy))
#define CONSOLE_KIT_SEAT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_CONSOLE_KIT_SEAT_PROXY, ConsoleKitSeatProxyClass))
#define CONSOLE_KIT_SEAT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_CONSOLE_KIT_SEAT_PROXY, ConsoleKitSeatProxyClass))
#define IS_CONSOLE_KIT_SEAT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_CONSOLE_KIT_SEAT_PROXY))
#define IS_CONSOLE_KIT_SEAT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_CONSOLE_KIT_SEAT_PROXY))

typedef struct _ConsoleKitSeatProxy ConsoleKitSeatProxy;
typedef struct _ConsoleKitSeatProxyClass ConsoleKitSeatProxyClass;
typedef struct _ConsoleKitSeatProxyPrivate ConsoleKitSeatProxyPrivate;

struct _ConsoleKitSeatProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  ConsoleKitSeatProxyPrivate *priv;
};

struct _ConsoleKitSeatProxyClass
{
  GDBusProxyClass parent_class;
};

GType console_kit_seat_proxy_get_type (void) G_GNUC_CONST;

void console_kit_seat_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ConsoleKitSeat *console_kit_seat_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
ConsoleKitSeat *console_kit_seat_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void console_kit_seat_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ConsoleKitSeat *console_kit_seat_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
ConsoleKitSeat *console_kit_seat_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_CONSOLE_KIT_SEAT_SKELETON (console_kit_seat_skeleton_get_type ())
#define CONSOLE_KIT_SEAT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_CONSOLE_KIT_SEAT_SKELETON, ConsoleKitSeatSkeleton))
#define CONSOLE_KIT_SEAT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_CONSOLE_KIT_SEAT_SKELETON, ConsoleKitSeatSkeletonClass))
#define CONSOLE_KIT_SEAT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_CONSOLE_KIT_SEAT_SKELETON, ConsoleKitSeatSkeletonClass))
#define IS_CONSOLE_KIT_SEAT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_CONSOLE_KIT_SEAT_SKELETON))
#define IS_CONSOLE_KIT_SEAT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_CONSOLE_KIT_SEAT_SKELETON))

typedef struct _ConsoleKitSeatSkeleton ConsoleKitSeatSkeleton;
typedef struct _ConsoleKitSeatSkeletonClass ConsoleKitSeatSkeletonClass;
typedef struct _ConsoleKitSeatSkeletonPrivate ConsoleKitSeatSkeletonPrivate;

struct _ConsoleKitSeatSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  ConsoleKitSeatSkeletonPrivate *priv;
};

struct _ConsoleKitSeatSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType console_kit_seat_skeleton_get_type (void) G_GNUC_CONST;

ConsoleKitSeat *console_kit_seat_skeleton_new (void);


G_END_DECLS

#endif /* __DBUS_CONSOLEKIT_SEAT_H__ */
